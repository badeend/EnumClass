// <auto-generated/>
#pragma warning disable
#nullable enable annotations

// MIT License
//
// Copyright (c) 2024 Dave Bakker
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

namespace Badeend
{
    /// <summary>
    /// Marks a class or record as a closed type hierarchy. The type annotated with
    /// this <c>[EnumClass]</c> attribute serves as the base for a fixed set of
    /// nested "case" subclasses.
    /// </summary>
    /// <remarks>
    /// <para>
    /// When applied to a type, this attribute indicates that the class is intended
    /// to serve as a base for a closed set of related types. Subclasses represent
    /// the specific variants within the hierarchy. All subclasses must be nested
    /// within the base class marked with this attribute. This ensures that the
    /// entire hierarchy remains encapsulated and adheres to the closed nature of
    /// the system.
    /// </para>
    /// <para>
    /// In contrast to regular inheritance where new subclasses can be added freely,
    /// <c>[EnumClass]</c> restricts the addition of new variants or subclasses beyond
    /// those initially defined. This restriction ensures that the set of possible
    /// subtypes remains fixed and known at compile-time. Which in turn enables
    /// additional features such as exhaustiveness checks in pattern matching.
    /// </para>
    /// <para>
    /// Aside from the mechanical advantages and restrictions, tagging a type as an
    /// <c>[EnumClass]</c> also helps developers more precisely express their intent;
    /// providing clarity on the design and usage of their classes. Consumers of the
    /// library can rely on this attribute to understand the intended semantics of
    /// the marked classes and to work with the promises provided by the closed type
    /// hierarchy.
    /// </para>
    /// </remarks>
    [global::System.AttributeUsage(global::System.AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    internal sealed class EnumClassAttribute : global::System.Attribute
    {
    }
}
